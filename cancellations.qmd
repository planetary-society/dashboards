```{python}
#| echo: false
#| include: false

# This chunk loads data, performs calculations, and prepares variables/files
# for the dashboard components. It won't be displayed in the output.

import pandas as pd
import collections as c # Import collections for Counter
import re
import glob
import os
from pathlib import Path
import json
from datetime import datetime
import math # For color interpolation ceiling
from itables import show

# --- State Abbreviation to FIPS Code Mapping ---
# Source: [https://www.census.gov/library/reference/code-lists/ansi.html#par_textimage_3](https://www.census.gov/library/reference/code-lists/ansi.html#par_textimage_3)

STATE_FIPS_MAP = {
    'AL': '01', 'AK': '02', 'AZ': '04', 'AR': '05', 'CA': '06', 'CO': '08', 'CT': '09',
    'DE': '10', 'DC': '11', 'FL': '12', 'GA': '13', 'HI': '15', 'ID': '16', 'IL': '17',
    'IN': '18', 'IA': '19', 'KS': '20', 'KY': '21', 'LA': '22', 'ME': '23', 'MD': '24',
    'MA': '25', 'MI': '26', 'MN': '27', 'MS': '28', 'MO': '29', 'MT': '30', 'NE': '31',
    'NV': '32', 'NH': '33', 'NJ': '34', 'NM': '35', 'NY': '36', 'NC': '37', 'ND': '38',
    'OH': '39', 'OK': '40', 'OR': '41', 'PA': '42', 'RI': '44', 'SC': '45', 'SD': '46',
    'TN': '47', 'TX': '48', 'UT': '49', 'VT': '50', 'VA': '51', 'WA': '53', 'WV': '54',
    'WI': '55', 'WY': '56', 'AS': '60', 'GU': '66', 'MP': '69', 'PR': '72', 'VI': '78'
}

# --- 1. Load and Clean Contract Data ---

# Find all CSV files in the data/ directory and select the newest one
csv_files = glob.glob('data/*.csv')
if not csv_files:
    raise FileNotFoundError("No CSV files found in data/ directory")
newest_file = max(csv_files, key=os.path.getmtime)
df = pd.read_csv(newest_file)

last_updated = datetime.fromtimestamp(os.path.getmtime(newest_file))

try:
    df['Nominal End Date'] = df['Nominal End Date'].astype(str)
    total_row_index = df[df['Nominal End Date'] == 'Total'].index[0]
    df_cleaned = df.iloc[:total_row_index].copy()
except IndexError:
    df_cleaned = df.copy()

# Process Obligations
if 'Total Obligations' in df_cleaned.columns:
    # Ensure string type, remove '$' and ',', convert to numeric
    df_cleaned['Total Obligations'] = df_cleaned['Total Obligations'].astype(str).replace({'\$': '', ',': ''}, regex=True)
    df_cleaned['Total Obligations'] = pd.to_numeric(df_cleaned['Total Obligations'], errors='coerce')
    # Remove rows where conversion failed (resulted in NaN)
    df_cleaned.dropna(subset=['Total Obligations'], inplace=True)
else:
    # Handle case where column might be missing
    df_cleaned['Total Obligations'] = 0

# --- Calculate the total formatted obligation value ---
# This uses the processed 'Total Obligations' column

total_contracts = len(df_cleaned)
total_obligations_raw = df_cleaned['Total Obligations'].sum()
total_obligations = f"${total_obligations_raw / 1_000_000:.1f}M" if total_obligations_raw > 0 else "$0.0M"
total_unique_recipcients = df_cleaned['Recipient'].nunique()
total_unique_districts = df_cleaned['District'].nunique()
last_update = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

df_present = df_cleaned.drop(columns=["Latest Modification Number", "Business Categories"])
# Transform the "Award ID" into a hyperlink using the URL from the "URL" column, then remove the "URL" column.
df_present['Award ID'] = df_present.apply(
    lambda row: f'<a href="{row["URL"]}" target="_blank">{row["Award ID"]}</a>',
    axis=1
)
df_present.drop(columns=["URL"], inplace=True)

# Format monetary columns in the contracts table for consistent display
if 'Total Obligations' in df_present.columns:
    df_present['Total Obligations'] = df_present['Total Obligations'].apply(
        lambda x: f"${x:,}" if isinstance(x, (int, float)) else x
    )

if 'Total Outlays' in df_present.columns:
    df_present['Total Outlays'] = df_present['Total Outlays'].apply(
        lambda x: f"${x:,.0f}" if isinstance(x, (int, float)) else x
    )

# --- 3. Prepare Congressional District Data ---

def get_geoid_from_district(district_str):
    """Converts 'XX-YY' or 'XX-ZZ' district format to 4-digit GEOID string."""
    if not isinstance(district_str, str) or '-' not in district_str:
        return None
    parts = district_str.split('-')
    state_abbr = parts[0].upper()
    district_num_str = parts[1].upper()

    state_fips = STATE_FIPS_MAP.get(state_abbr)
    if not state_fips:
        return None

    # Handle 'ZZ' districts described in GeoJSON source
    if district_num_str == 'ZZ':
         cd_fips = 'ZZ' # Keep ZZ as is
    else:
        try:
            # Pad district number to 2 digits (e.g., 1 -> 01)
            cd_fips = f"{int(district_num_str):02d}"
        except ValueError:
            return None # Invalid district number

    return f"{state_fips}{cd_fips}"

# Apply function to create GEOID column
df_cleaned['GEOID'] = df_cleaned['District'].apply(get_geoid_from_district)

# Aggregate counts per GEOID
district_counts = df_cleaned.dropna(subset=['GEOID'])['GEOID'].value_counts()
max_contracts_per_district = district_counts.max() if not district_counts.empty else 1
district_counts_dict = district_counts.to_dict() # Convert to dict for faster lookup

# --- 4. Prepare Recipient Table Data ---
recipients_table_data = df_cleaned.groupby('Recipient').agg(
    **{
        '# of Contracts': ('Award ID', 'count'),
        'Total Obligations': ('Total Obligations', 'sum')
    }
).reset_index()

# Format the obligation column as currency
recipients_table_data['Total Obligations'] = (
    recipients_table_data['Total Obligations']
    .map(lambda x: f"${x:,.0f}")
)

# Sort by number of contracts descending
recipients_table_data = recipients_table_data.sort_values(
    by='# of Contracts', ascending=False
).reset_index(drop=True)

# --- 5. Load GeoJSON ---
geojson_file_path = 'us_congressional_districts.geojson'
try:
    with open(geojson_file_path, 'r') as f:
        congressional_geojson_data = json.load(f)
except FileNotFoundError:
    print(f"ERROR: GeoJSON file not found at {geojson_file_path}")
    congressional_geojson_data = None # Set to None to handle gracefully later
except json.JSONDecodeError:
    print(f"ERROR: Could not decode GeoJSON file at {geojson_file_path}")
    congressional_geojson_data = None

# --- 6. Color Scale Logic for Choropleth ---

def hex_to_rgb(hex_color):
    """Converts #RRGGBB to (R, G, B) tuple."""
    hex_color = hex_color.lstrip('#')
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

def rgb_to_hex(rgb_tuple):
    """Converts (R, G, B) tuple to #RRGGBB."""
    return '#{:02x}{:02x}{:02x}'.format(*map(int, rgb_tuple)) # Ensure integers

# Define target colors
color_zero = hex_to_rgb('#FFFFFF') # White for 0
color_one = hex_to_rgb('#d19690')  # Light red/pink for 1
color_max = hex_to_rgb('#9c1a0e')  # Dark red for max

def get_choropleth_color(count, max_count):
    """Calculates interpolated color based on count."""
    if count <= 0:
        return rgb_to_hex(color_zero)
    if count == 1:
        return rgb_to_hex(color_one)
    if max_count <= 1: # Avoid division by zero if max is 1
         return rgb_to_hex(color_one)

    # Interpolation factor (0=one, 1=max)
    t = (count - 1) / (max_count - 1)
    t = max(0, min(1, t)) # Clamp t between 0 and 1

    # Linear interpolation for R, G, B
    r = color_one[0] + (color_max[0] - color_one[0]) * t
    g = color_one[1] + (color_max[1] - color_one[1]) * t
    b = color_one[2] + (color_max[2] - color_one[2]) * t

    # Round components before converting back to hex
    return rgb_to_hex((round(r), round(g), round(b)))

# --- 7. Define Style Callback for Map ---
def choropleth_style_callback(feature):
    """Returns style dictionary for a GeoJSON feature."""
    # GEOID in properties seems to be STATEFP + CD118FP
    geoid = feature['properties'].get('GEOID', '')
    count = district_counts_dict.get(geoid, 0) # Get count, default to 0
    color = get_choropleth_color(count, max_contracts_per_district)

    return {
        'fillColor': color,
        'color': '#555555',  # Border color for districts
        'weight': 0.5,        # Border weight
        'fillOpacity': 0.7    # Fill opacity
    }

# --- 8. Histogram Data Preparation (Keyword-Based Approach) ---

# Define grouping keyword lists
SMALL_KEYWORDS = ["8(a)", "HUBZone", "Disadvantaged Business", "Women Owned Small Business", "AbilityOne"]
# Note: "Disadvantaged Business" will catch SDB, Self-Certified SDB, DoT Certified DBE
MINORITY_KEYWORDS = ["Alaskan Native", "Native Hawaiian", "Tribally Owned", "American Indian", "Asian", "Black American", "Hispanic", "Other Minority", "Minority Owned"]
# Note: "Asian" catches Asian-Pacific and Subcontinent Asian. "American Indian" catches Native American.
VETERAN_KEYWORDS = ["Veteran Owned", "Service Disabled Veteran"]
HIGHER_ED_KEYWORDS = ["University", "College", "Institution", "Land Grant"] # Simplified
FOREIGN_KEYWORD = "Foreign"

# Define the label extraction function
def extract_labels(category_str):
    labels = set()
    # Handle potential NaN values gracefully
    if pd.isna(category_str):
        return labels
    # Split by comma or semicolon, strip whitespace
    items = [item.strip() for item in re.split(r"[,;]", str(category_str)) if item.strip()]
    has_small_program_label = False
    has_minority_label = False
    has_veteran_label = False
    has_higher_ed_label = False
    has_foreign_label = False

    for item in items:
        # Check keywords only once per aggregate category to avoid double counting from multiple matches within one contract
        if not has_small_program_label and any(k in item for k in SMALL_KEYWORDS):
            labels.add("Small Business Programs")
            has_small_program_label = True
        if not has_minority_label and any(k in item for k in MINORITY_KEYWORDS):
            labels.add("Minority-Owned Business")
            has_minority_label = True
        if not has_veteran_label and any(k in item for k in VETERAN_KEYWORDS):
            labels.add("Veteran-Run Business")
            has_veteran_label = True
        if not has_higher_ed_label and any(k in item for k in HIGHER_ED_KEYWORDS):
            labels.add("Higher Education Institution")
            has_higher_ed_label = True
        if not has_foreign_label and FOREIGN_KEYWORD in item:
            labels.add("Foreign-Owned Business")
            has_foreign_label = True

    # Add other relevant, non-aggregated, non-excluded categories if needed
    if 'Nonprofit Organization' in items:
         labels.add("Nonprofit Organization")
    # Add a basic check for 'Government' if it's not part of other categories
    is_gov_subcat = any(kw in item for kw in ["Local", "State", "Federal", "Tribal"] for item in items)
    if 'Government' in items and not is_gov_subcat and not has_higher_ed_label:
         labels.add("Government (General)")


    return labels

# Calculate counts using the keyword approach
hist_counter = c.Counter()
# Ensure df_cleaned and the column exist before iterating
if 'df_cleaned' in locals() and 'Business Categories' in df_cleaned.columns:
    for entry in df_cleaned["Business Categories"]:
        # The extract_labels function returns a set, ensuring each label is counted only once per contract
        labels_for_entry = extract_labels(entry)
        for lab in labels_for_entry:
            hist_counter[lab] += 1
    # Convert counter to pandas Series for Altair plotting
    hist_data_series = pd.Series(hist_counter).sort_values(ascending=False)
else:
    print("Warning: 'Business Categories' data not available for histogram preparation.")
    hist_data_series = pd.Series(dtype=int) # Empty series to avoid downstream errors

# --- 9. Aggregate data by district ---
district_table_data = df_cleaned.groupby('District').agg(
    **{
        '# of Contracts': ('Award ID', 'count'),
        'Total Obligations': ('Total Obligations', 'sum')
    }
).reset_index()

# Format the obligation column as currency
district_table_data['Total Obligations'] = (
    district_table_data['Total Obligations']
    .map(lambda x: f"${x:,.0f}")
)

# Sort by number of contracts descending
district_table_data = district_table_data.sort_values(
    by='# of Contracts', ascending=False
).reset_index(drop=True)


```

---
title: NASA Cancelled Contracts and Grants
format:
  dashboard:
    pagetitle: NASA Cancellations Tracking Dashboard
    description-meta: "Dashboard tracking NASA grants and contracts terminated by the Trump Administration."
    author-meta: "Casey Dreier/The Planetary Society"
    logo: "img/TPS_Logo_3Stack-White.png"
    lang: en
    nav-buttons:
      - href: mailto:casey.dreier@planetary.org
        text: "Contact"
    theme: yeti
    css: custom.css
    include-in-header:
      - text: |
          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
          <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;700&display=swap" rel="stylesheet">
          <!-- Twitter Card meta tags -->
          <meta name="twitter:card" content="summary_large_image">
          <meta name="twitter:site" content="@exploreplanets">
          <meta name="twitter:title" content="NASA Cancellations Tracking Dashboard">
          <meta name="twitter:description" content="Interactive dashboard tracking NASA grants and contracts terminated by the second Trump Administration. View impacted districts, recipients, and contract details.">
          <meta name="twitter:image" content="https://dashboards.planetary.org/img/tps-nasa-cancellations-dashboard-preview.png">
          <meta name="twitter:image:alt" content="NASA Contract Cancellations Dashboard showing map of impacted congressional districts">
          <!-- Open Graph meta tags -->
          <meta property="og:type" content="website">
          <meta property="og:site_name" content="The Planetary Society">
          <meta property="og:title" content="NASA Cancellations Tracking Dashboard">
          <meta property="og:description" content="Interactive dashboard tracking NASA grants and contracts terminated by the second Trump Administration. View impacted districts, recipients, and contract details.">
          <meta property="og:image" content="https://dashboards.planetary.org/img/tps-nasa-cancellations-dashboard-preview.png">
          <meta property="og:image:width" content="1200">
          <meta property="og:image:height" content="630">
          <meta property="og:image:alt" content="NASA Contract Cancellations Dashboard showing map of impacted congressional districts">
          <meta property="og:url" content="https://dashboards.planetary.org/cancellations.html">
          <!-- Additional meta for better SEO -->
          <meta name="robots" content="index, follow">
          <meta name="theme-color" content="#037cc2">
          <!-- Add this to your include-in-header section -->
          <script type="application/ld+json">
            {
              "@context": "https://schema.org",
              "@type": "Dataset",
              "name": "NASA Contract Cancellations Tracker",
              "description": "Interactive dashboard tracking NASA grants and contracts terminated by the second Trump Administration, including congressional district impacts and recipient details.",
              "url": "https://dashboards.planetary.org/cancellations.html",
              "keywords": [
                "NASA",
                "contracts",
                "government spending",
                "Trump administration",
                "congressional districts",
                "federal procurement",
                "space policy"
              ],
              "license": "https://creativecommons.org/licenses/by/4.0/",
              "creator": {
                "@type": "Person",
                "name": "Casey Dreier",
                "affiliation": {
                  "@type": "Organization",
                  "name": "The Planetary Society",
                  "url": "https://planetary.org"
                },
                "email": "casey.dreier@planetary.org",
                "sameAs": "https://twitter.com/CaseyDreier"
              },
              "publisher": {
                "@type": "Organization",
                "name": "The Planetary Society",
                "url": "https://planetary.org",
                "logo": {
                  "@type": "ImageObject",
                  "url": "https://dashboards.planetary.org/img/TPS_Logo_3Stack-White.png"
                }
              },
              "dateCreated": "2025-01-20",
              "dateModified": "2025-05-25",
              "temporalCoverage": "2025-01-20/..",
              "spatialCoverage": {
                "@type": "Place",
                "name": "United States",
                "geo": {
                  "@type": "GeoShape",
                  "box": "18.91619 -179.14734 71.3577635769 179.77847"
                }
              },
              "distribution": [
                {
                  "@type": "DataDownload",
                  "encodingFormat": "text/csv",
                  "contentUrl": "https://docs.google.com/spreadsheets/d/1I3qXx1XDLKukqAd9U6zVp7S861XUAKZaAp0vrmsDJpg/export?format=csv",
                  "name": "NASA Contract Cancellations CSV"
                },
                {
                  "@type": "DataDownload",
                  "encodingFormat": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                  "contentUrl": "https://docs.google.com/spreadsheets/d/1I3qXx1XDLKukqAd9U6zVp7S861XUAKZaAp0vrmsDJpg/export?format=xlsx",
                  "name": "NASA Contract Cancellations Excel"
                }
              ],
              "variableMeasured": [
                {
                  "@type": "PropertyValue",
                  "name": "Total Obligations",
                  "description": "Total dollar amount of contract obligations",
                  "unitText": "USD"
                },
                {
                  "@type": "PropertyValue",
                  "name": "Congressional District",
                  "description": "US Congressional district where contract recipient is located"
                },
                {
                  "@type": "PropertyValue",
                  "name": "Recipient",
                  "description": "Organization or entity receiving the NASA contract"
                },
                {
                  "@type": "PropertyValue",
                  "name": "Award ID",
                  "description": "Unique federal contract identifier"
                }
              ],
              "funding": {
                "@type": "Grant",
                "funder": {
                  "@type": "Organization",
                  "name": "NASA",
                  "url": "https://nasa.gov"
                }
              },
              "citation": "Dreier, C. (2025). NASA Contract Cancellations Tracker. The Planetary Society. Retrieved from https://dashboards.planetary.org/cancellations.html",
              "inLanguage": "en-US"
            }
          </script>
          <script>
            // Wait for everything to load, then fix the logo link
            window.addEventListener('load', function() {
                // Give Quarto time to finish rendering
                setTimeout(function() {
                    // Find the anchor that contains the navbar logo
                    const logoAnchor = document.querySelector('a[href="#"]');
                    if (logoAnchor && logoAnchor.querySelector('.navbar-logo')) {
                        logoAnchor.href = 'https://planetary.org';
                        logoAnchor.target = '_blank';
                        logoAnchor.title = 'Visit The Planetary Society';
                        console.log('Successfully updated logo link');
                    } else {
                        console.log('Logo anchor not found');
                    }
                }, 1000); // Wait 1 second for dashboard to fully render
            });
          </script>
---

# Summary

## Row {.flow}

```{python}
#| component: valuebox
#| title: "Contracts Cancelled"
#| icon: files
dict(
    value = f"{total_contracts}",
)
```

```{python}
#| component: valuebox
#| title: "Total Value Impacted"
#| icon: chevron-double-down
dict(
  value = total_obligations,
)
```

```{python}
#| component: valuebox
#| title: "Recipients Impacted"
#| icon: building-down
dict(
  value = f"{total_unique_recipcients}",
)
```

```{python}
#| component: valuebox
#| title: "Districts Impacted"
#| icon: bank
dict(
  value = f"{total_unique_districts}",
)
```

## Row {height=75%}

### Column {width=60%}

```{python}
#| title: "Impacted Congressional Districts"
#| component: card
#| echo: false
#| warning: false
#| message: false


import folium
from branca.colormap import LinearColormap
from IPython.display import IFrame

# --- build hover_info dict with contract counts ---
hover_info = {}
for geoid, group in df_cleaned.dropna(subset=['GEOID']).groupby('GEOID'):
    n = len(group)
    # first line shows total contracts in that district
    header = f"<b>Number of contracts: {n}</b>"
    # then one entry per contract
    lines = []
    for _, row in group.iterrows():
        amt = row['Total Obligations']
        amt_str = f"${amt:,.0f}"
        award = row.get('Award ID', 'N/A')
        rec   = row['Recipient']
        lines.append(f"<b>{rec}</b><br>{amt_str} (Award ID: {award})")
    # join header + a separator + all the lines
    hover_info[geoid] = header + "<br><br>" + "<br>".join(lines)

# inject hover_info into GeoJSON properties
for feature in congressional_geojson_data['features']:
    gid = feature['properties'].get('GEOID')
    feature['properties']['hover_info'] = hover_info.get(gid, "No contracts")

# build the map
m = folium.Map(location=[36.7570, -90.3929], zoom_start=4, tiles="CartoDB positron")

# color ramp
colormap = LinearColormap(
    ["#ffffff", "#ff0000", "#660000"],
    vmin=0,
    vmax=max_contracts_per_district,
)

def style_function(feature):
    geoid = feature["properties"]["GEOID"]
    count = district_counts_dict.get(geoid, 0)
    return {
        "fillColor": colormap(count),
        "color": "#555555",
        "weight": 0.5,
        "fillOpacity": 0.8,
    }

# create the tooltip on our injected html
tooltip = folium.GeoJsonTooltip(
    fields=["hover_info"],
    aliases=[""],
    labels=False,
    sticky=True,
    parse_html=True,
    style=("background-color: white; padding: 5px;")
)

# add layers (suppress repr)
_ = folium.GeoJson(
    congressional_geojson_data,
    style_function=style_function,
    tooltip=tooltip,
    name="Impacted Districts"
).add_to(m)

# 6. Display
m
```


### Column {width=40%}{.tabset}
```{python}
#| title: Districts Impacted
#| component: datatable
#| sortable: true

show(district_table_data, classes="compact display", searching=False, info=False)
```

```{python}
#| title: Recipients Impacted
#| component: datatable
#| sortable: true

show(recipients_table_data, classes="compact display", searching=False, info=False)

```

# Contracts Listing

## Row {height="12%"}
::: {.card expandable="false" class="vertical-align"}
Data last updated `{python} last_updated.strftime("%B %-d, %Y")`. Download as <a href="https://docs.google.com/spreadsheets/d/1I3qXx1XDLKukqAd9U6zVp7S861XUAKZaAp0vrmsDJpg/export?format=csv">CSV</a> | <a href="https://docs.google.com/spreadsheets/d/1I3qXx1XDLKukqAd9U6zVp7S861XUAKZaAp0vrmsDJpg/export?format=xlsx">Excel</a>
:::

## Row {height="88%"}
```{python}
#| title: Contracts Data
#| component: datatable
#| sortable: true

show(df_present, classes="display nowrap compact", searching=False, info=False)

```

# About {expandable="false"}

**About This Dashboard**

This dashboard provides insights into NASA contracts and grants that may have been cancelled, terminated, or significantly modified since January 20th, 2025. The data presented here are compiled and maintained by Casey Dreier at The Planetary Society to enhance transparency surrounding NASA's programmatic activities and funding allocations.

**How the Data is Compiled**

To identify potential changes, several different official government data sources and public datasets: the DOGE website, NASA's Procurement Data View database, and an archived database of NASA Grants information. These are monitored on a daily basis. These sources are scanned for specific indicators that might suggest an award is undergoing a significant change, such as:

* DOGE-reported actions
* Keywords like "termination" or "stop work" appearing in modification descriptions.
* Official status updates indicating cancellation or termination.
* Changes suggesting a significant reduction in scope, like a shortened performance period combined with decreased funding.

When one of these sources flags a potential change in a NASA contract or grant, the system retrieves comprehensive and standardized details for that specific award directly from the official **USAspending.gov** database. This ensures the information presented—such as recipient names, funding amounts, award dates, and locations—is based on the authoritative federal spending record.

The goal is to provide a consolidated list of NASA awards that warrant further investigation due to data signals suggesting they may have been cancelled or significantly altered.

*This data is checked daily. The last updated date reflects the last time a change was detected. Inclusion on this list signifies that an award has met specific criteria suggesting a potential cancellation or significant modification based on available data; further investigation is recommended.*


*For questions, corrections, or submissions, contact Casey Dreier at [casey.dreier@planetary.org](mailto:casey.dreier@planetary.org).*



---

