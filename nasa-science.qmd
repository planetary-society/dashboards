---
title: NASA Science Spending Across the U.S.
format:
  dashboard:
    pagetitle: NASA Science Spending Across the U.S.
    description-meta: "Dashboard showing NASA's science investments across the United States."
    author-meta: "The Planetary Society"
    logo: "img/TPS_Logo_3Stack-White.png"
    lang: en
    nav-buttons:
      - href: mailto:casey.dreier@planetary.org
        text: "Contact"
    theme: yeti
    css: custom.css
    include-in-header:
      - text: |
          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
          <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;700&display=swap" rel="stylesheet">
          <script>
            window.addEventListener('load', function() {
                setTimeout(function() {
                    const logoAnchor = document.querySelector('a[href="#"]');
                    if (logoAnchor && logoAnchor.querySelector('.navbar-logo')) {
                        logoAnchor.href = 'https://planetary.org';
                        logoAnchor.target = '_blank';
                        logoAnchor.title = 'The Planetary Society';
                    }
                }, 1000);
            });
          </script>
---

```{python}
#| echo: false
#| include: false

import sys
sys.path.append('src')

from us_spending_maps import USSpendingMaps, create_spending_map, amount_formatter
import pandas as pd
from datetime import datetime
from itables import show
import os


# Load and prepare data
science_district_csv_path = 'data/NASA-district-Science-summary.csv'
science_state_csv_path = 'data/NASA-state-Science-summary.csv'
district_last_updated = datetime.fromtimestamp(os.path.getmtime(science_district_csv_path))

# Create dashboard data using the convenience function
district_result = create_spending_map(
  csv_path=science_district_csv_path,
  geo_col="district",
  level="district",
  value_cols=["fy_2024_obligations", "fy_2023_obligations","fy_2022_obligations"],
  use_stepped=True,
  geojson_path="us_congressional_districts.geojson"
)
district_map = district_result['map']
district_df = district_result["dataframe"]

# Count of all districts with spending (i.e. no all empty rows)
districts_with_spending = district_df[(district_df['fy_2024_obligations'] != 0) | (district_df['fy_2023_obligations'] != 0) | (district_df['fy_2022_obligations'] != 0)]



# Create dataframe to list states and district links to spending information
districts_with_spending = district_df[
    (district_df['fy_2024_obligations'] != 0) |
    (district_df['fy_2023_obligations'] != 0) |
    (district_df['fy_2022_obligations'] != 0)
]

df_with_url = districts_with_spending.assign(
    district_url=lambda df_lambda: df_lambda.apply(
      lambda row: f"https://dashboards.planetary.org/nasa-spending/{row['state']}/{str(row['district'].split('-')[1]).zfill(2)}/",
      axis=1
    )
)

districts_by_state = (
  df_with_url
  .groupby('state')
  .agg(
    districts=('district', lambda x: ', '.join( # Added a space after comma for better readability if multiple links
      [
        # MODIFICATION: Output HTML <a> tag directly
        f'<a href="{u}" target="_blank">{d.split("-")[1].zfill(2)}</a>'
        for d, u in zip(x, df_with_url.loc[x.index, 'district_url'])
      ]
    ))
  )
  .reset_index()
)

districts_by_state['state'] = districts_by_state['state'].apply(
    lambda state_abbr: f'<a href="https://dashboards.planetary.org/nasa-spending/{state_abbr}" target="_blank">{state_abbr}</a>'
)

district_count = districts_with_spending.shape[0]
percent_districts = round(((district_count/435)*100))
# Sum all values in fy_2024_obligations
district_total_2024 = amount_formatter(district_df["fy_2024_obligations"].sum())

state_result = create_spending_map(
  csv_path=science_state_csv_path,
  geo_col="state",
  level="state",
  value_cols=["fy_2024_obligations", "fy_2023_obligations","fy_2022_obligations"],
  use_stepped=True,
  geojson_path="us_states.geojson"
)
state_map = state_result['map']
state_df = state_result['dataframe']

state_count = state_df[(state_df['fy_2024_obligations'] != 0) | (state_df['fy_2023_obligations'] != 0) | (state_df['fy_2022_obligations'] != 0)].shape[0]

```

# Science Spending Maps

## Row{.flow}
```{python}
#| component: valuebox
#| title: "States Impacted"
#| icon: geo-alt

dict(
  value = state_count
)

```

```{python}
#| component: valuebox
#| title: "Districts Impacted"
#| icon: map

dict(
  value = f"{district_count}"
)

```

```{python}
#| component: valuebox
#| title: "Dollars Obligated (FY24)"
#| icon: cash-coin

dict(
  value = district_total_2024
)

```

## Row

### Column {width=75%}{.tabset}

```{python}
#| title: Science by District"
#| component: card
#| echo: false

district_map
```

```{python}
#| title: "Science by State" 
#| component: card
#| echo: false

state_map

```

### Column {width=25%}
```{python}
#| title: "Economic Impact Reports" 
#| component: datatable
#| echo: false

show(districts_by_state,classes="display wrap compact", searching=False, info=False)
```


# Data Summary

::: {.card}
**Data Summary**

- **Last Updated:** `{python} district_last_updated.strftime("%B %-d, %Y")`
- **Data Source:** USASpending.gov

**About the Data**

This dashboard displays the average annual NASA Science Mission Directorate contract obligations by congressional district for fiscal years 2022-2024. The data includes research grants, contracts, and cooperative agreements supporting NASA's science programs including Earth Science, Planetary Science, Astrophysics, and Heliophysics.

**Color Scale**

The map uses a logarithmic color scale to better visualize the wide range of spending values across districts. Darker blue indicates higher spending levels.

:::